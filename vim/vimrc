source ~/.vim/plugins.vim

set bg=dark
set textwidth=0

set wildignore+=*.o,*.obj,.git,*.pyc

" encoding
set termencoding=utf-8
"set encoding=utf-8
set nolist

" RIP ARROWKEYS
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" jk chord -> esc
inoremap jk <esc>

" basic options
set hidden
set cursorline
set number
set cmdheight=1
set history=1000
set nocompatible            " use vim defaults
set noerrorbells            " no error beepz
set novisualbell            " turn off visual bell
set shortmess+=aIt          " abbreviate messages
set showcmd                 " display incomplete commands
set incsearch               " search as characters are entered
set hlsearch                " highlight search
set showfulltag             " add context from around the tag definition (?)
set showmatch               " highlight matching paren, bracket, brace, etc
set showmode                " display mode at the bottom
set title                   " show title
set titlestring=VIM:\ %<%F  " define title
set ttyfast                 " make things smoother (?)
set undolevels=2000         " undo levels
set viminfo='1000,f1,:1000,/1000
set clipboard=unnamed       " set anonymous register to point to system clipboard

set wildmenu                " use wildcard completion

set nobackup                " no backup file
set nowritebackup           " don't write
set noswapfile              " don't care

" indent settings
filetype plugin indent on
set expandtab               " enter spaces when tab is pressed
set tabstop=4               " use 4 spaces to represent tab
set shiftwidth=4            " number of spaces to use for auto indent
set autoindent              " copy indent from current line when starting a new line

"  OS X 10.11 mouse support :/
set mouse=a

if exists("vimrcEX")
    autocmd! vimrcEX
endif

augroup vimrcEX
  autocmd FileType html setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType css setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType scss setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType htmldjango setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType phtml setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType javascript setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=4
  autocmd FileType clojure setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType perl setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType php setlocal expandtab shiftwidth=4 tabstop=4
  autocmd FileType xml setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType make setlocal noexpandtab
  autocmd FileType puppet setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType markdown setlocal textwidth=79
  autocmd FileType yaml setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType sh setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType vue setlocal expandtab shiftwidth=2 tabstop=2
augroup END

set backspace=indent,eol,start  " make backspaces more powerful

" folding
set foldmethod=marker
set foldmethod=indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default

" search options
set ignorecase
nnoremap <leader><space> :noh<cr>   " clear searches
nnoremap <tab> %                    " map tab to % for bracket matching
vnoremap <tab> %

" set bracket matching and comment formats
set matchpairs+=<:>
set comments-=s1:/*,mb:*,ex:*/
set comments+=s:/*,mb:**,ex:*/
set comments+=fb:*
set comments+=b:\"
set comments+=n::

" use less space for line numbering if possible
if v:version >= 700
  try
    setlocal numberwidth=3
    catch
  endtry
endif

" easymotion (mapping double leader -> leader)
let g:EasyMotion_leader_key = '<Leader>'

" rainbow parens
au VimEnter * RainbowParenthesesToggle

set background=dark
let base16colorspace=256
colorscheme base16-monokai

" airline / powerline
let g:airline#extensions#syntastic#enabled = 1
let g:airline_theme='effish'
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
"let g:airline_solarized_bg='dark'
set laststatus=2
set showtabline=2

" syntastic
let g:syntastic_check_on_open=1
" ignore lines > 79 chars
let g:syntastic_python_flake8_args='--ignore=E501'
let g:syntastic_javascript_checkers=['eslint']
syntax on

" required for ambv/black
let g:python3_host_prog='/usr/local/bin/python3'
let g:black_virtualenv='~/.local/black-venv'
" disable single to double quotes
let g:black_skip_string_normalization=1

" gitgutter update refresh delay
set updatetime=250

" This set of commands will only highlight the trailing whitespace on opening the buffer and leaving the insert mode.
highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

" transparent BG (if set by term)
hi NonText ctermbg=none
hi Normal guibg=NONE ctermbg=NONE

" whitespace helper (:set list / :set nolist)
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

" Open a new empty buffer
nmap <leader>T :enew<cr>

" Move to the next buffer
nmap <leader>] :bnext<CR>

" Move to the previous buffer
nmap <leader>[ :bprevious<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR><Paste>

" <3 FZF
nnoremap <silent> <Leader><Leader> :FZF -m<CR>

" FZF BUFFERS
function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader>b :call fzf#run({
\   'source':  reverse(<sid>buflist()),
\   'sink':    function('<sid>bufopen'),
\   'options': '+m',
\   'down':    len(<sid>buflist()) + 2
\ })<CR>

" fzf splits
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-h': 'split',
  \ 'ctrl-v': 'vsplit' }

" auto-reload vimrc/gvimrc
augroup myvimrc
    au!
    au BufWritePost .vimrc,vimrc,.gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END
